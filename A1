# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report, accuracy_score
import time

# Load datasets
train_data = pd.read_csv('/mnt/data/adult.csv')
test_data = pd.read_csv('/mnt/data/adult_test.csv')

# Checking for missing values
print(train_data.isnull().sum())

# Handling missing values using mode imputation
for col in train_data.select_dtypes(include=['object']).columns:
    train_data[col].fillna(train_data[col].mode()[0], inplace=True)
    test_data[col].fillna(test_data[col].mode()[0], inplace=True)

# Separating features and target
X_train = train_data.drop(columns=['income-reach-50K'])
y_train = train_data['income-reach-50K']
X_test = test_data.drop(columns=['income-reach-50K'])
y_test = test_data['income-reach-50K']

# One-hot encode categorical features and scale numerical features
categorical_cols = X_train.select_dtypes(include=['object']).columns
numeric_cols = X_train.select_dtypes(include=['int64', 'float64']).columns

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_cols),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)])

# Applying preprocessing
X_train = preprocessor.fit_transform(X_train)
X_test = preprocessor.transform(X_test)

# Model 1: Decision Tree Classifier
dt_model = DecisionTreeClassifier(random_state=42)
start_time = time.time()
dt_model.fit(X_train, y_train)
dt_training_time = time.time() - start_time
y_pred_dt = dt_model.predict(X_test)

# Model 2: Gradient Boosting Classifier
gb_model = GradientBoostingClassifier(random_state=42)
start_time = time.time()
gb_model.fit(X_train, y_train)
gb_training_time = time.time() - start_time
y_pred_gb = gb_model.predict(X_test)

# Evaluation
print("Decision Tree Classifier Report")
print(classification_report(y_test, y_pred_dt))
print(f"Training Time: {dt_training_time} seconds")

print("Gradient Boosting Classifier Report")
print(classification_report(y_test, y_pred_gb))
print(f"Training Time: {gb_training_time} seconds")

# Accuracy Comparison
print(f"Decision Tree Accuracy: {accuracy_score(y_test, y_pred_dt)}")
print(f"Gradient Boosting Accuracy: {accuracy_score(y_test, y_pred_gb)}")
